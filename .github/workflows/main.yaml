name: CI/CD Pipeline

on:
  push:
    branches:
      # - dev.20241208 # debug
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      GITHUB_SHA: ${{ github.sha }}
    outputs:
      version: ${{ steps.set_version.outputs.version }}

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up Go Environment
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Check for file changes
      id: file_check
      run: |
        if git diff --name-only HEAD^ | grep -q ".go$"; then
          echo "updated=true" >> $GITHUB_OUTPUT
        else
          echo "updated=false" >> $GITHUB_OUTPUT
          echo "No Go files were changed, skipping build steps."
        fi

    - name: Run build.sh script
      if: steps.file_check.outputs.updated == 'true'
      run: chmod +x ./build.sh && ./build.sh
   
    - name: Login to GitHub Container Registry
      if: steps.file_check.outputs.updated == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: set lower case owner name
      run: |
        echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
      env:
        OWNER: '${{ github.repository_owner }}'
        
    - name: Build and push Docker image
      if: steps.file_check.outputs.updated == 'true'
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ghcr.io/${{ env.OWNER_LC }}/rss2telegram:latest
    
    - name: Create release
      if: steps.file_check.outputs.updated == 'true'
      id: set_version
      run: |
        VERSION=`date -u +"v%Y.%m%d.$(git rev-parse --short HEAD)"`
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Creating tag for version $VERSION"
        git tag $VERSION
        git push origin $VERSION
        echo "Tag $VERSION pushed!"

  release-binaries:
    needs: build-and-push
    if: needs.build-and-push.result == 'success' && needs.build-and-push.outputs.version != ''
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      if: needs.build-and-push.outputs.version != ''

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
      if: needs.build-and-push.outputs.version != ''

    - name: Build binaries
      run: |
        VERSION="${{ needs.build-and-push.outputs.version }}"
        mkdir -p dist
        
        # Build for Linux (amd64 and arm64)
        GOOS=linux GOARCH=amd64 go build -o dist/rss2telegram-linux-amd64 ./cmd/main.go
        GOOS=linux GOARCH=arm64 go build -o dist/rss2telegram-linux-arm64 ./cmd/main.go
        
        # Build for macOS (amd64 and arm64)
        GOOS=darwin GOARCH=amd64 go build -o dist/rss2telegram-darwin-amd64 ./cmd/main.go
        GOOS=darwin GOARCH=arm64 go build -o dist/rss2telegram-darwin-arm64 ./cmd/main.go
        
        # Build for Windows (amd64)
        GOOS=windows GOARCH=amd64 go build -o dist/rss2telegram-windows-amd64.exe ./cmd/main.go
        
        # Create archives
        cd dist
        tar czf rss2telegram-linux-amd64.tar.gz rss2telegram-linux-amd64
        tar czf rss2telegram-linux-arm64.tar.gz rss2telegram-linux-arm64
        tar czf rss2telegram-darwin-amd64.tar.gz rss2telegram-darwin-amd64
        tar czf rss2telegram-darwin-arm64.tar.gz rss2telegram-darwin-arm64
        zip rss2telegram-windows-amd64.zip rss2telegram-windows-amd64.exe
      if: needs.build-and-push.outputs.version != ''

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build-and-push.outputs.version }}
        name: Release ${{ needs.build-and-push.outputs.version }}
        files: |
          dist/rss2telegram-linux-amd64.tar.gz
          dist/rss2telegram-linux-arm64.tar.gz
          dist/rss2telegram-darwin-amd64.tar.gz
          dist/rss2telegram-darwin-arm64.tar.gz
          dist/rss2telegram-windows-amd64.zip
        draft: false
        prerelease: false #true Release会被标记为预发布版本（Pre-release）
      if: needs.build-and-push.outputs.version != ''